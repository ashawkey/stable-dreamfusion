import gc
import torch
import os
import json
import gradio as gr
import cv2
import zipfile


# main

def main():
    # global variables used to parse variables between functions that are not users' direct input
    global settings
    global current_tab
    global max_epoch

    with gr.Blocks(title="zero123d reconstruction") as app:
        # make temp directory
        os.makedirs("temp", exist_ok=True)
        
        # initialize global variables and configure gui based on loaded settings
        settings = load_settings()
        max_epoch = 0
        current_tab = 3
        if settings["info_tab_on_launch"]:
            current_tab = 0

        with gr.Tabs(selected=current_tab) as tabs:
            with gr.Tab(label="radius discovery", id=3) as radius_discovery_tab:
                pass
            
            with gr.Tab(label="six-view generation", id=4) as six_view_generation_tab:
                pass
            
            with gr.Tab(label="model reconstruction", id=5) as model_reconstruction_tab:
                pass
            
            with gr.Tab(label="model fine-tuning", id=6) as model_fine_tuning_tab:
                pass
            
            with gr.Tab(label="project manager", id=2) as file_manager_tab:
                gr.Markdown(
                    """
                    ### this tab is used to view and delete projects, simply select a project name to start.
                    """
                )
                with gr.Row():
                    model_viewer_output = gr.Image(label="model viewer", interactive=False)
                    with gr.Column():
                        model_viewer_slider_input = gr.Slider(minimum=0, maximum=0, label="slide to change viewpoint of model", step=1)
                        project_name_input = gr.Dropdown(choices=os.listdir("workspaces/"), label="project name")
                        delete_button = gr.Button(visible=False)
                        file_output = gr.File(visible=False)

                    model_viewer_slider_input.change(fn=change_model_viewer_slider_event, 
                                                    inputs=[project_name_input, model_viewer_slider_input], 
                                                    outputs=[model_viewer_output])
                    project_name_input.input(fn=load_project, 
                                            inputs=[project_name_input], 
                                            outputs=[model_viewer_output, model_viewer_slider_input, delete_button, file_output])
                    delete_button.click(fn=delete_project,
                                        inputs=[project_name_input],
                                        outputs=[model_viewer_output, model_viewer_slider_input, project_name_input, delete_button, file_output])
                
            with gr.Tab(label="settings", id=1) as settings_tab:
                info_tab_on_launch = gr.Checkbox(value=settings["info_tab_on_launch"], label="load up info tab on launch")
                settings_tab_save_button = gr.Button(value="save settings", variant="primary")
                
                settings_tab_save_button.click(fn=save_settings,
                                                inputs=[info_tab_on_launch])
                    
            with gr.Tab(label="info", id=0) as info_tab:
                gr.Markdown(
                    """
                    # image to 3d model generation
                    a final year project by oh zhi hua (rod) for nanyang technological university computer engineering program.
                    
                    ## Introduction
                    This project provides a graphical user interface to generate 3D models from a single image by wrapping the stable-dreamfusion with gradio.
                    
                    As the quality of the 3D model depends largely on the quality of the image generated by stable-diffusion, any unsatisfactory image will ruin the end result.
                    
                    Therefore, the project also provide a way to generate novel viewpoints of the object in the input image, which is then fed into stable-dreamfusion for 3D reconstruction.
                    
                    To start, simply click the tab labeled "reconstruction" to start exploring.
                    
                    Have fun!
                    
                    ## Tabs
                    rod's workflow ==> generate 3D models from a single image using rod's workflow
                    
                    file manager   ==> manage the existing projects, removing (deleting) unwanted projects, cleaning temp files
                    
                    settings       ==> settings page to configure the default values when starting the application
                    
                    ## Support
                    If you need support, please submit an issue at "https://github.com/ghotinggoad/stable-dreamfusion-gui/issues"
                    I will check if the bug is from my wrapper or from stable-dreamfusion!
                    """)
        
        # navigation buttons and events for the main tasks
        with gr.Row():
            previous_tab_button = gr.Button(value="previous")
            next_tab_button = gr.Button(value="next", variant="primary")
        previous_tab_button.click(fn=previous_tab_button_event, outputs=[tabs, previous_tab_button, next_tab_button])
        next_tab_button.click(fn=next_tab_button_event, outputs=[tabs, previous_tab_button, next_tab_button])
        # these events are used to update current_tab when click since gradio doesn't support getting selected input
        radius_discovery_tab.select(fn=lambda: globals().update(current_tab=3)).then(fn=update_current_tab_event, outputs=[previous_tab_button, next_tab_button])
        six_view_generation_tab.select(fn=lambda: globals().update(current_tab=4)).then(fn=update_current_tab_event, outputs=[previous_tab_button, next_tab_button])
        model_reconstruction_tab.select(fn=lambda: globals().update(current_tab=5)).then(fn=update_current_tab_event, outputs=[previous_tab_button, next_tab_button])
        model_fine_tuning_tab.select(fn=lambda: globals().update(current_tab=6)).then(fn=update_current_tab_event, outputs=[previous_tab_button, next_tab_button])
        file_manager_tab.select(fn=lambda: globals().update(current_tab=2)).then(fn=update_current_tab_event, outputs=[previous_tab_button, next_tab_button])
        settings_tab.select(fn=lambda: globals().update(current_tab=1)).then(fn=update_current_tab_event, outputs=[previous_tab_button, next_tab_button])
        info_tab.select(fn=lambda: globals().update(current_tab=0)).then(fn=update_current_tab_event, outputs=[previous_tab_button, next_tab_button])
    
    app.launch()
    
    # rmdir temp folder
    delete_directory("temp")
    # clear ram (including vram)
    clear_memory()

# functions used to interact with system

def clear_memory():
    # called after deleting the items in python
    gc.collect()
    torch.cuda.empty_cache()

def delete_directory(path):
    try:
        for root, dirs, files in os.walk(path, topdown=False):
            for file in files:
                file_path = os.path.join(root, file)
                os.remove(file_path)
            for dir in dirs:
                dir_path = os.path.join(root, dir)
                os.rmdir(dir_path)
        os.rmdir(path)
    except:
        print("cannot delete the folder "+path)

def load_settings():
    try:
        with open("settings.json", "r") as file:
            data = json.load(file)
        return data
    except:
        print("settings failed to load")

def save_settings(info_tab_on_launch):
    try:
        with open("settings.json", "w") as file:
            settings["info_tab_on_launch"] = info_tab_on_launch
            json.dump(settings, file, indent=4)
    except:
        print("settings failed to save")

def load_project(project_name):
    global max_epoch

    items = os.listdir("workspaces/"+project_name+"/results/")
    if not items:
        return gr.Slider.update(maximum=0, value=0)
    for item in items:
        index = str(item).find("df_ep")+5
        if index > 0:
            max_epoch = int(str(item)[index:index+4])
            break
    
    os.makedirs("temp/"+project_name, exist_ok=True)
    video = cv2.VideoCapture("workspaces/"+project_name+"/results/df_ep{:04d}_rgb.mp4".format(max_epoch))
    image = video.read()[1]
    
    cv2.imwrite("temp/"+project_name+"/df_ep{:04d}_{:02d}_rgb.png".format(max_epoch, 0), image)
    for i in range(1, 100):
        temp = video.read()[1]
        cv2.imwrite("temp/"+project_name+"/df_ep{:04d}_{:02d}_rgb.png".format(max_epoch, i), temp)
    
    image = cv2.cvtColor(image, cv2.COLOR_BGRA2RGB)
    
    with zipfile.ZipFile("temp/"+project_name+"/"+project_name+".zip", "w") as file:
        file.write("workspaces/"+project_name+"/mesh/albedo.png", arcname="albedo.png")
        file.write("workspaces/"+project_name+"/mesh/mesh.mtl", arcname="mesh.mtl")
        file.write("workspaces/"+project_name+"/mesh/mesh.obj", arcname="mesh.obj")
    
    return image, gr.Slider(label="slide to change viewpoint of model", minimum=0, maximum=99, value=0, step=1), \
           gr.Button(value="delete", visible=True, variant="stop"), gr.File(value="temp/"+project_name+"/"+project_name+".zip", label="download", visible=True)

def delete_project(project_name):
    # delete_directory("workspaces/"+project_name)
    return gr.Image(value=None, interactive=False), gr.Slider(minimum=0, maximum=0, value=None, step=1, label="slide to change viewpoint of model"), \
           gr.Dropdown(choices=os.listdir("workspaces/"), value=None, label="project name"), gr.Button(visible=False), gr.File(visible=False)
                        

# gradio event functions

def previous_tab_button_event():
    global current_tab
    current_tab -= 1
    if current_tab <= 3:
        current_tab = 3
        return gr.Tabs(selected=current_tab), gr.Button(value="previous", variant="secondary", visible=True), gr.Button(value="next", variant="primary", visible=True)
    else:
        return gr.Tabs(selected=current_tab), gr.Button(value="previous", variant="primary", visible=True), gr.Button(value="next", variant="primary", visible=True)

def next_tab_button_event():
    global current_tab
    current_tab += 1
    if current_tab >= 6:
        current_tab = 6
        return gr.Tabs(selected=current_tab), gr.Button(value="previous", variant="primary", visible=True), gr.Button(value="next", variant="secondary", visible=True)
    else:
        return gr.Tabs(selected=current_tab), gr.Button(value="previous", variant="primary", visible=True), gr.Button(value="next", variant="primary", visible=True)

def update_current_tab_event():
    global current_tab
    if current_tab == 3:
        return gr.Button(value="previous", variant="secondary", visible=True), gr.Button(value="next", variant="primary", visible=True)
    elif current_tab == 6:
        return gr.Button(value="previous", variant="primary", visible=True), gr.Button(value="next", variant="secondary", visible=True)
    elif current_tab < 3:
        return gr.Button(visible=False), gr.Button(visible=False)
    else:
        return gr.Button(value="previous", variant="primary", visible=True), gr.Button(value="next", variant="primary", visible=True)

def change_model_viewer_slider_event(project_name, slider):
    # updates the image based on the slider value, usually to select the "angle" (index of the image)
    image = cv2.imread("temp/"+project_name+"/df_ep{:04d}_{:02d}_rgb.png".format(max_epoch, slider))
    image = cv2.cvtColor(image, cv2.COLOR_BGRA2RGB)
    return gr.Image(value=image, interactive=False)

# zero123/stable-dreamfusion/cv functions

if __name__ == "__main__":
    main()